# Created by https://www.toptal.com/developers/gitignore/api/django
# Edit at https://www.toptal.com/developers/gitignore?templates=django

### Django ###
*.log
*.pot
*.pyc
__pycache__/
local_settings.py
db.sqlite3
db.sqlite3-journal
media

# If your build process includes running collectstatic, then you probably don't need or want to include staticfiles/
# in your Git repository. Update and uncomment the following line accordingly.
# <django-project-name>/staticfiles/

### Django.Python Stack ###
# Byte-compiled / Address 
# class Address(models.Model):
#     street = models.CharField(max_length=255)
#     city = models.CharField(max_length=100)
#     postal_code = models.CharField(max_length=20)
#     country = models.CharField(max_length=100)

#     def __str__(self):
#         """
#         Returns a string representation of the address.
#         """
#         return f"{self.street}, {self.city}, {self.postal_code}, {self.country}"

# # UserProfile
# class UserProfile(models.Model):
#     """
#     Model representing a user profile.
#     """
#     user = models.ForeignKey(MyUser, on_delete=models.CASCADE)
#     address = models.ForeignKey(Address, on_delete=models.SET_NULL, null=True, blank=True)
#     phone_number = models.CharField(max_length=20, blank=True)
#     bio = models.TextField(blank=True)
#     profile_picture = models.ImageField(upload_to='profile_pictures/', blank=True, null=True)
#     is_student = models.BooleanField(default=False)
#     is_alumni = models.BooleanField(default=False)
#     is_lecturer = models.BooleanField(default=False)
#     isAdmin = models.BooleanField(default=False)
#     education = models.TextField(blank=True)

#     def __str__(self):
#         """
#         Returns a string representation of the user profile.
#         """
#         return f"{self.user.email}'s profile"
#         return self.email



# # company profile model
# class CompanyProfile(models.Model):
#     user = models.OneToOneField(MyUser, on_delete=models.CASCADE)
#     name = models.CharField(max_length=255)
#     description = models.TextField(blank=True)
#     address = models.CharField(max_length=255, blank=True)
#     website_link = models.URLField(blank=True)
#     instagram_link = models.URLField(blank=True)
#     twitter_link = models.URLField(blank=True)
#     def __str__(self):
#         """
#         Returns a string representation of the company profile.
#         """
#         return self.name


# class StudentProfile(models.Model, UserProfile):
#     user = models.OneToOneField(MyUser, on_delete=models.CASCADE)
#     RegistrationNumber = models.CharField(max_length=255)
#     GraduationYear = models.DateField()

#     def __str__(self):
#         """
#         Returns a string representation of the student profile.
#         """
#         return self.user.email

    optimized / DLL files
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo

# Django stuff:

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
myenv

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# End of https://www.toptal.com/developers/gitignore/api/django